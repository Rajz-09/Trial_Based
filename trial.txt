
require("dotenv").config(); // Load environment variables
const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const cors = require("cors");
const Razorpay = require("razorpay");
const path = require("path");

const app = express();

// Enable CORS
const corsOptions = {
  origin: 'http://localhost:5500', // Update with your frontend URL
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
};
app.use(cors(corsOptions));


// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.raw({ type: "application/json" })); // Required for Razorpay Webhook

// Connect to MongoDB Atlas
mongoose
  .connect(process.env.MONGO_URI)
  .then(() => console.log("Connected to MongoDB Atlas"))
  .catch((err) => console.error("Error connecting to MongoDB:", err));

// Razorpay Configuration
const razorpayInstance = new Razorpay({
  key_id: process.env.RAZORPAY_KEY_ID,
  key_secret: process.env.RAZORPAY_SECRET,
});

// User Schema
const userSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  name: { type: String, default: '' },
  subscriptionStatus: { type: Boolean, default: false },
  subscriptionPlan: { type: String, default: "" },
  subscriptionExpiry: { type: Date }, // Only used for unlimited token plans
  tokens: { type: Number, default: 0 }, // Track remaining tokens
  convertCount: { type: Number, default: 0 }
});
const User = mongoose.model("User", userSchema);

// Order Schema
const orderSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  amount: { type: Number, required: true },
  subscriptionPlan: { type: String, required: true },
  orderId: { type: String, required: true },
  paymentStatus: { type: String, default: "pending" }, // Default to "pending"
  createdAt: { type: Date, default: Date.now },
  expiresAt: { type: Date },
});

const Order = mongoose.model("Order", orderSchema);

// Middleware to authenticate user
const authenticateUser = (req, res, next) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) {
    return res.status(401).json({ message: "Access denied. No token provided." });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    console.log("Authenticated User:", req.user);
    next();
  } catch (err) {
    console.error("Token Verification Error:", err.message);
    res.status(401).json({ message: "Invalid or expired token." });
  }
};

// Modified increment-convert route to handle token expiry
app.post('/increment-convert', async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ email });
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    const isTokenPlan = user.subscriptionPlan.includes('Token Based');
    const hasValidUnlimitedPlan = !isTokenPlan && user.subscriptionExpiry && user.subscriptionExpiry > new Date();

    if (isTokenPlan) {
      // For token-based plans
      if (user.tokens <= 0) {
        return res.status(403).json({ message: 'No tokens remaining' });
      }

      // Calculate remaining tokens after this conversion
      const remainingTokens = user.tokens - 1;
      
      // If this conversion will use the last token, set expiry date to now
      const updateData = { 
        $inc: { 
          convertCount: 1,
          tokens: -1 
        }
      };

      if (remainingTokens === 0) {
        updateData.$set = {
          subscriptionExpiry: new Date(),
          subscriptionStatus: false
        };
      }

      await User.findOneAndUpdate({ email }, updateData);

    } else if (hasValidUnlimitedPlan) {
      // For unlimited plan users, just increment convert count
      await User.findOneAndUpdate(
        { email },
        { $inc: { convertCount: 1 } }
      );
    } else {
      return res.status(403).json({ message: 'Subscription expired or invalid' });
    }

    const updatedUser = await User.findOne({ email });
    res.json({ 
      message: 'Convert count updated', 
      convertCount: updatedUser.convertCount,
      tokensRemaining: updatedUser.tokens,
      subscriptionStatus: updatedUser.subscriptionStatus,
      subscriptionExpiry: updatedUser.subscriptionExpiry
    });
  } catch (err) {
    console.error("Error updating convert count:", err.message);
    res.status(500).json({ message: 'Error updating count', error: err.message });
  }
});

// Updated check subscription route to handle token-based expiry
app.get("/checkSubscription", authenticateUser, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);

    if (!user) {
      return res.status(404).json({ message: "User not found." });
    }

    const isTokenPlan = user.subscriptionPlan.includes('Token Based');

    let isActive;
    if (isTokenPlan) {
      // For token-based plans, active if they have tokens
      isActive = user.tokens > 0;
    } else {
      // For unlimited token plans, check expiry date
      isActive = user.subscriptionStatus && user.subscriptionExpiry > new Date();
    }

    res.status(200).json({
      subscriptionActive: isActive,
      subscriptionExpiry: user.subscriptionExpiry,
      subscriptionPlan: user.subscriptionPlan,
      tokens: isTokenPlan ? user.tokens : null,
      convertCount: user.convertCount
    });
  } catch (error) {
    console.error("Error checking subscription:", error.message);
    res.status(500).json({ message: "Internal server error" });
  }
});

// Modified payment success route to initialize convert count
app.post("/simulatePaymentSuccess", authenticateUser, async (req, res) => {
  try {
    const { orderId } = req.body;

    if (!orderId) {
      return res.status(400).json({ message: "Order ID is required." });
    }

    const order = await Order.findOne({
      orderId,
      userId: req.user.id,
    });

    if (!order) {
      return res.status(404).json({ message: "Order not found." });
    }

    order.paymentStatus = "completed";
    await order.save();

    const isTokenPlan = order.subscriptionPlan.includes('Token Based');

    // Base update data
    const updateData = {
      subscriptionStatus: true,
      subscriptionPlan: order.subscriptionPlan,
      convertCount: 0 // Reset convert count for new subscription
    };

    if (isTokenPlan) {
      // For token-based plans
      updateData.$inc = { tokens: order.tokenAmount };
      updateData.subscriptionExpiry = null; // Initially no expiry
    } else {
      // For unlimited token plans
      updateData.subscriptionExpiry = order.expiresAt;
    }

    const updatedUser = await User.findByIdAndUpdate(
      req.user.id,
      updateData,
      { new: true }
    );

    res.status(200).json({
      success: true,
      message: "Payment success simulated. Subscription is now active.",
      user: {
        subscriptionStatus: updatedUser.subscriptionStatus,
        subscriptionPlan: updatedUser.subscriptionPlan,
        subscriptionExpiry: updatedUser.subscriptionExpiry,
        tokens: updatedUser.tokens,
        convertCount: updatedUser.convertCount
      }
    });
  } catch (error) {
    console.error("Error simulating payment success:", error.message);
    res.status(500).json({ message: "Internal server error" });
  }
});

// Serve Product Page (HTML File)
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "membership.html"));
});



// Modify createOrder route to explicitly set expiresAt to null for token plans
app.post("/createOrder", authenticateUser, async (req, res) => {
  try {
    const { amount, subscriptionPlan } = req.body;

    if (!amount || !subscriptionPlan) {
      return res.status(400).json({ message: "Invalid request data" });
    }

    const user = await User.findById(req.user.id);
    if (!user) {
      return res.status(404).json({ message: "User not found." });
    }

    const options = {
      amount: amount * 100,
      currency: "INR",
      receipt: `receipt_order_${Date.now()}`,
    };

    const order = await razorpayInstance.orders.create(options);

    // Initialize variables
    let expiresAt = null;
    let tokenAmount = 0;

    // Check if it's a token-based plan
    const isTokenPlan = subscriptionPlan.includes('Token Based');

    if (!isTokenPlan) {
      // Only set expiry for unlimited token plans
      expiresAt = new Date();
      switch (subscriptionPlan) {
        case 'Monthly Plan':
          expiresAt.setMonth(expiresAt.getMonth() + 3); // 3 months
          break;
        case '6-Month Plan':
          expiresAt.setMonth(expiresAt.getMonth() + 6);
          break;
        case 'Yearly Plan':
          expiresAt.setFullYear(expiresAt.getFullYear() + 1);
          break;
      }
    } else {
      // Set token amount for token-based plans
      switch (subscriptionPlan) {
        case '100 Token Based':
          tokenAmount = 100;
          break;
        case '250 Token Based':
          tokenAmount = 250;
          break;
        case '500 Token Based':
          tokenAmount = 500;
          break;
      }
    }

    const newOrder = new Order({
      userId: user._id,
      amount,
      subscriptionPlan,
      orderId: order.id,
      expiresAt, // Will be null for token-based plans
      tokenAmount
    });

    await newOrder.save();

    res.status(200).json({
      success: true,
      order_id: order.id,
      amount: options.amount,
      key_id: process.env.RAZORPAY_KEY_ID,
    });
  } catch (error) {
    console.error("Error creating order:", error.message);
    res.status(500).json({ success: false, message: "Failed to create order" });
  }
});

// Modify payment success route to ensure token plans don't get expiry dates
app.post("/simulatePaymentSuccess", authenticateUser, async (req, res) => {
  try {
    const { orderId } = req.body;

    if (!orderId) {
      return res.status(400).json({ message: "Order ID is required." });
    }

    const order = await Order.findOne({
      orderId,
      userId: req.user.id,
    });

    if (!order) {
      return res.status(404).json({ message: "Order not found." });
    }

    order.paymentStatus = "completed";
    await order.save();

    const isTokenPlan = order.subscriptionPlan.includes('Token Based');

    // Base update data
    const updateData = {
      subscriptionStatus: true,
      subscriptionPlan: order.subscriptionPlan,
    };

    if (isTokenPlan) {
      // For token-based plans
      updateData.$inc = { tokens: order.tokenAmount };
      updateData.subscriptionExpiry = null; // Explicitly set to null
    } else {
      // For unlimited token plans
      updateData.subscriptionExpiry = order.expiresAt;
    }

    const updatedUser = await User.findByIdAndUpdate(
      req.user.id,
      updateData,
      { new: true }
    );

    res.status(200).json({
      success: true,
      message: "Payment success simulated. Subscription is now active.",
      user: {
        subscriptionStatus: updatedUser.subscriptionStatus,
        subscriptionPlan: updatedUser.subscriptionPlan,
        subscriptionExpiry: updatedUser.subscriptionExpiry,
        tokens: updatedUser.tokens
      }
    });
  } catch (error) {
    console.error("Error simulating payment success:", error.message);
    res.status(500).json({ message: "Internal server error" });
  }
});










*********************** PREVIOUS NAVBAR ****************************

@import url('https://fonts.googleapis.com/css2?family=Yatra+One&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Kalam:wght@300;400;700&display=swap');

:root {
    --primary-color: #028490;
    --secondary-color: #DAF4F7;
    --background-gradient: linear-gradient(180deg, #028490 11%, #2797A2 48%, #E0F7FA 100%);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: Arial, sans-serif;
}

body {
    background: var(--background-gradient);
    min-height: 100vh;
    padding: 20px;
}

#mainContent {
    margin: 30px; /* Add margin around the main content */
    padding: 20px; 
}

/* Navbar Styles */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
    background-color: transparent !important;
    position: relative;
    z-index: 1000;
}

.logo {
    /* height: 90px;
    width: 250px; */
    height: 6rem;
    width: 20rem;
    order: 1;
}

.logo img {
    height: 100%;
    width: 100%;
}

.horizontal-nav {
    display: flex;
    gap: 2.5rem;
    list-style: none;
    margin-right: 2rem;
    order: 2;
    align-items: center;
    background-color: transparent;
}

.horizontal-nav a {
    text-decoration: none;
    color: white;
    font-weight: 500;
    font-size: 1.5rem;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    transition: all 0.3s ease;
    font-family: 'Yatra One';
    background-color: transparent;
}

.horizontal-nav a:hover {
    background-color: rgba(240, 240, 240, 0.5);
    color: #141414;
}

.horizontal-nav a.active {
    background-color: #AFF1E7;
    color: #000;
}

.user-profile {
    position: relative;
    width: 60px;
    height: 60px;
    background-color:#AFF1E7;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #141414;
    font-weight: bold;
    font-size: 1.5rem;
    order: 3;
}


.mobile-menu-btn {
    display: none;
    background: none;
    border: none;
    font-size: 1.8rem;
    cursor: pointer;
    order: 1;
    color: #333;
}

.user-profile-mobile {
    display: none;
}




/* Responsive Design */
@media (max-width: 768px) {

    .horizontal-nav {
        display: none;
    }

    .mobile-menu-btn {
        display: block;
    }

    .navbar {
        padding: 1rem;
    }

    /* Mobile menu button is visible */
    .mobile-menu-btn {
        display: block;
        order: 1;
        z-index: 1001;
    }

    .logo {
        order: 2;
    }

    /* Horizontal profile is hidden */
    .user-profile {
        display: none;
    }

/* Profile Circle for Horizontal Navbar */
.user-profile {
    width: 60px;
    height: 60px;
    background-color: #AFF1E7;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #141414;
    font-weight: bold;
    font-size: 1.5rem;
}

/* Mobile Navbar */
.mobile-menu-btn {
    display: none;
    background: none;
    border: none;
    font-size: 1.8rem;
    cursor: pointer;
    order: 1;
    color: #fff;
}

/* Sidebar Styling for Mobile */
.mobile-nav {
    position: fixed;
    top: 0;
    left: -100%;
    width: 250px;
    height: 100%;
    background: linear-gradient(145deg, #6c9aca, #06b399); /* Gradient */
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    padding-top: 2rem;
    box-shadow: -4px 0 8px rgba(0, 0, 0, 0.2);
    transition: left 0.3s ease;
    z-index: 1000;
    color: white;
    border-top-right-radius: 30px;
    border-bottom-right-radius: 30px;
}

.mobile-nav.active {
    left: 0; /* Slide in when active */
}

.mobile-nav li {
    list-style: none;
    margin-bottom: 1rem;
    text-align: center;
}

.mobile-nav a {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: white;
    font-size: 1.5rem;
    text-decoration: none;
    transition: all 0.3s ease-in-out;
    border-radius: 10px;
    padding: 15px 20px;
}

.mobile-nav a:hover {
    background: rgba(255, 255, 255, 0.1);
    color: #004D40;
}

.mobile-nav a.active {
    background-color: rgba(255, 255, 255, 0.2);
    color: white;
}

/* Profile Circle for Mobile */
.user-profile-mobile {
    width: 80px;
    height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #00796B;
    color: white;
    font-size: 2rem;
    font-weight: bold;
    border-radius: 50%;
    margin-bottom: 1.5rem;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
}

}

<nav class="navbar">
        <button class="mobile-menu-btn" onclick="toggleMenu()">☰</button>

        <div class="logo">
            <img src="Images/Swar_logo_NEW_Final_2.png" alt="Logo">
        </div>

        <ul class="nav-links" id="navLinks">
            <li class="user-profile-mobile">J</li>
            <li><a href="./mainContent.html" class="nav-link active" data-page="mainContent">Home</a></li>
            <li><a href="./fluteFingering.html" class="nav-link" data-page="fluteFingering">Goto Fingers</a></li>
            <li><a href="./userGuide.html" class="nav-link" data-page="userGuide">User Guide</a></li>
            <li><a href="./membership.html" class="nav-link" data-page="membership">Membership</a></li>
            <li><a href="./contactUs.html" class="nav-link" data-page="contactUs">Contact Us</a></li>

            <li class="user-profile">
                <span class="profile-icon" id="profile-icon">J</span>
            </li>
        </ul>
    </nav> 


    //LAST LAYOUT CSS done

/* OLD ONE */

/* @import url('https://fonts.googleapis.com/css2?family=Yatra+One&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Kalam:wght@300;400;700&display=swap');

:root {
    --primary-color: #028490;
    --secondary-color: #DAF4F7;
    --background-gradient: linear-gradient(180deg, #028490 11%, #2797A2 48%, #E0F7FA 100%);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: Arial, sans-serif;
}

body {
    background: var(--background-gradient);
    min-height: 100vh;
    padding: 20px;
}

#mainContent {
    margin: 30px;
    padding: 20px;
}

.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
    background-color: transparent !important;
    position: relative;
    z-index: 1;
    flex-wrap: nowrap;
}

.logo {
    height: 6rem;
    width: 20rem;
    order: 1;
}

.logo img {
    height: 100%;
    width: 100%;

}

.menuShow {
    position: relative;
}

.menuShow .tooltip {
    visibility: hidden;
    opacity: 0;
    position: absolute;
    bottom: -35px;
    left: 50%;
    transform: translateX(-50%);
    background: #333;
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 0.9rem;
    white-space: nowrap;
    transition: visibility 0s, opacity 0.3s ease-in-out;
    z-index: 1000;
}

.menuShow:hover .tooltip {
    visibility: visible;
    opacity: 1;
}


.nav-links.mobile-nav.open {
    display: block;
    transform: translateX(0);
}

.horizontal-nav {
    display: flex;
    gap: 2.5rem;
    list-style: none;
    margin-right: 2rem;
    order: 2;
    align-items: center;
    background-color: transparent;
}

.horizontal-nav a {
    text-decoration: none;
    color: white;
    font-weight: 500;
    font-size: 1.5rem;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    transition: all 0.3s ease;
    font-family: 'Yatra One';
    background-color: transparent;
}

.horizontal-nav a:hover {
    background-color: rgba(240, 240, 240, 0.5);
    color: #141414;
}

.horizontal-nav a.active {
    background-color: #AFF1E7;
    color: #000;
}

.user-profile {
    position: relative;
    width: 60px;
    height: 60px;
    background-color: #AFF1E7;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #141414;
    font-weight: bold;
    font-size: 1.5rem;
    order: 3;
}

#navLinks {
    transition: left 0.3s ease-in;
}

.user-profile-mobile {
    display: none;
}


@media (min-width: 769px) {
    .mobile-nav {
        display: none;
    }

    .mobile-menu-btn {
        display: none;
    }
}

@media (max-width: 769x) {

    .horizontal-nav {
        display: none;
    }

    .mobile-menu-btn {
        display: block;
    }

    .navbar {
        z-index: 50;
    }

    .mobile-menu-btn {
        display: block;
        order: 1;
        z-index: 1001;
        order: 1;
        background-color: transparent;
        border: none;
        font-size: 3rem;
    }

    .logo {
        order: 2;
        margin-left: auto;
    }


    .user-profile {
        display: none;
    }

    .user-profile {
        width: 60px;
        height: 60px;
        background-color: #AFF1E7;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #141414;
        font-weight: bold;
        font-size: 1.5rem;
    }



    .mobile-nav {
        position: fixed;
        top: 0;
        left: -100%;
        width: 200px;
        height: 100%;
        background: linear-gradient(145deg, #6c9aca, #06b399);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        padding-top: 2rem;
        box-shadow: -4px 0 8px rgba(0, 0, 0, 0.2);
        transition: left 0.3s ease;
        z-index: 1005;
        color: white;
        border-top-right-radius: 30px;
        border-bottom-right-radius: 30px;
        border-top-left-radius: 10px;
        border-bottom-left-radius: 10px;
        overflow-y: auto;
        scrollbar-width: none;
        -ms-overflow-style: none;
    }

    .mobile-nav::-webkit-scrollbar {
        display: none;
    }

    .mobile-nav.active {
        left: 0;
    }

    .mobile-nav li {
        list-style: none;
        margin-bottom: 1rem;
        text-align: center;
    }

    .mobile-nav a {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: white;
        font-size: 1.5rem;
        text-decoration: none;
        transition: all 0.3s ease-in-out;
        border-radius: 10px;
        padding: 15px 20px;
        font-size: 1.1rem;
    }

    .mobile-nav a:hover {
        background: rgba(255, 255, 255, 0.351);
        color: #004D40;
    }

    .mobile-nav a.active {
        background: rgba(255, 255, 255, 0.351);
        color: #004D40;
    }

    .user-profile-mobile {
        margin-top: 30px;
        width: 100px !important;
        height: 100px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #00796B;
        color: white;
        font-size: 3rem;
        font-weight: bold;
        border-radius: 50%;
        margin-bottom: 1.2rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    }

} */

// VERCEL JSON first one//
// {
//     "version": 2,
//     "builds": [
//       { "src": "api/server.js", "use": "@vercel/node" },
//       { "src": "*.html", "use": "@vercel/static" },
//       { "src": "css/**", "use": "@vercel/static" },
//       { "src": "javascript/**", "use": "@vercel/static" },
//       { "src": "Images/**", "use": "@vercel/static" }
//     ],
//     "routes": [
//       { "src": "/api/(.*)", "dest": "/api/server.js" },
//       { "src": "/(.*)", "dest": "/index.html" }
//     ]
//   }
  
